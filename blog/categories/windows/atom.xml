<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: windows | Blog Of Peng Fei]]></title>
  <link href="http://airpfei.github.com/blog/categories/windows/atom.xml" rel="self"/>
  <link href="http://airpfei.github.com/"/>
  <updated>2012-05-14T23:38:06+08:00</updated>
  <id>http://airpfei.github.com/</id>
  <author>
    <name><![CDATA[Peng Fei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[windows via c/c++ 笔记 （八）]]></title>
    <link href="http://airpfei.github.com/blog/2011/12/09/learn-windows-progamme-8/"/>
    <updated>2011-12-09T00:00:00+08:00</updated>
    <id>http://airpfei.github.com/blog/2011/12/09/learn-windows-progamme-8</id>
    <content type="html"><![CDATA[<h2>第19章 DLL基础</h2>


<p><span style="display:block;text-indent:2em;">一般在dll中分配的内存，都需要通过dll释放</span>
<span style="display:block;text-indent:2em;">DLL若连接的是静态版本，那么DLL的代码里面就会有一份free和malloc的代码，若EXE也使用的是静态版本的C/C++运行库，那么也会有另一份代码。当然你使用DLL代码里申请的内存不能在EXE的free代码中释放。原因是因为有两个不通的堆管理，在EXE中查不到相应申请的内存，自然释放会失败。</span>
<span style="display:block;text-indent:2em;">导出函数或变量，链接器生成lib文件。</span>
<span style="display:block;text-indent:2em;">dumpbin -exports *.dll</span>
<span style="display:block;text-indent:2em;">dumpbin -imports *.exe</span>
<span style="display:block;text-indent:2em;">避免MS VC++的名字粉碎(Name Mangling)：.def文件EXPORTS段导出函数名；extern "C"；#pragma comment (linker, "/export:MyFunc=_MyFunc@8")</span>
<span style="display:block;text-indent:2em;">导入：__declspec(dllimport)或使用extern</span>
<span style="display:block;text-indent:2em;">运行可执行模块：操作系统加载程序为进程创建虚拟地址空间，把可执行模块映射到进程的地址空间中。之后加载程序会检查可执行模块的导入段(不同版本的dll可能在这个步骤出问题)，对所需的DLL进行定位并将其映射到进程的地址空间中。</span>
<span style="display:block;text-indent:2em;">基址重定位和绑定可以加快应用程序初始化速度。</span></p>

<h2>第20章 DLL高级技术</h2>


<p><span style="display:block;text-indent:2em;">LoadLibrary(Ex)、FreeLibrary、FreeLibraryAndExitThread、GetModuleHandle、GetModuleFileName</span>
<span style="display:block;text-indent:2em;">GetProcAddress</span>
<span style="display:block;text-indent:2em;">DllMain的序列化调用。DisableThreadLibraryCalls</span>
<span style="display:block;text-indent:2em;">延迟载入DLL：当我们的代码试图引用DLL包含的符号时载入DLL。加快初始化速度；解决老版本DLL没有一些函数的问题。</span>
<span style="display:block;text-indent:2em;">一个导出全局变量的DLL、Kernel32.dll无法延迟加载。不应在DllMain中调用延迟加载的函数。</span>
<span style="display:block;text-indent:2em;">VcppException延迟载入DLL异常处理，DelayLoadInfo</span>
<span style="display:block;text-indent:2em;">函数转发器：#pragma comment (linker, "/export:SomeFunc=Dllwork.SomeOtherFunc")</span>
<span style="display:block;text-indent:2em;">模块的基地址重定位，显著提高整个系统的性能。/FIXED不包含重定位段。</span>
<span style="display:block;text-indent:2em;">模块的绑定，提高性能，不必再对模块重新定位，不必查看导入函数的虚拟地址。</span></p>

<h2>第21章 线程局部存储区</h2>


<p><span style="display:block;text-indent:2em;">动态TSL：TlsAlloc、TlsSetValue、TlsGetValue、TlsFree</span>
<span style="display:block;text-indent:2em;">静态TLS：__declspec(thread)</span></p>

<h2>第22章 DLL注入和API拦截</h2>


<p><span style="display:block;text-indent:2em;"><a href="http://www.codeproject.com/KB/system/inject2it.aspx" target="_blank">Demo</a></span>
<span style="display:block;text-indent:2em;">SetWindowLongPtr。从根本上将，DLL注入是目标进程中的一个线程调用LoadLibrary载入我们想要的DLL。</span>
<span style="display:block;text-indent:2em;">使用注册表注入DLL：只会映射到使用Use32.dll的进程中</span>
<span style="display:block;text-indent:2em;">使用Windows挂钩注入DLL：SetWindowsHookEx、UnhookWindowsHookEx。使用PostThreadMessage线程同步。</span>
<span style="display:block;text-indent:2em;">使用远程线程注入DLL：CreateRemoteThread、VirtualAllocEx、VirtualFreeEx、ReadProcessMemory、WriteProcessMemory</span></p>

<h2>结构化异常处理</h2>


<p><span style="display:block;text-indent:2em;"><strong>try中使用return、goto、longjump，</strong>finally中的代码也会被执行。</span>
<span style="display:block;text-indent:2em;"><strong>try, </strong>finally 框架会使finally中的代码执行</span>
<span style="display:block;text-indent:2em;">__leave关键字会使执行代码跳转到try块的结尾。</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[windows via c/c++ 笔记 （七）]]></title>
    <link href="http://airpfei.github.com/blog/2011/11/30/learn-windows-progamme-7/"/>
    <updated>2011-11-30T00:00:00+08:00</updated>
    <id>http://airpfei.github.com/blog/2011/11/30/learn-windows-progamme-7</id>
    <content type="html"><![CDATA[<h2>第13章 Windows内存体系结构</h2>


<p><span style="display:block;text-indent:2em;">need reread</span>
<span style="display:block;text-indent:2em;">空指针赋值分区、用户模式分区、64KB禁入分区、内核模式分区</span>
<span style="display:block;text-indent:2em;">32位App运行在64位Windows分配的0x00000000'7FFFFFFF以下的地址空间，64位App默认在0x00000000'80000000以上的地址空间</span>
<span style="display:block;text-indent:2em;">系统会确保VirtualAlloc预订的地址区域的起始地址是分配粒度(allocation granularity)的整数倍</span>
<span style="display:block;text-indent:2em;">一个块是一些连续的页面</span></p>

<h2>第14章 探索虚拟内存</h2>


<p><span style="display:block;text-indent:2em;">系统信息：GetSystemInfo、GetLogicalProcessorInformation、IsWow64Process、GetCurrentProcess</span>
<span style="display:block;text-indent:2em;">虚拟内存状态：GlobalMemoryStatus(Ex)</span>
<span style="display:block;text-indent:2em;">NUMA机器中的内存管理：GetNumaAvailableMemoryNode、GetNumaProcessNode、GetNumaHighestNodeNumber、GetNumaNodeProcessorMask</span>
地址空间的状态：VirtualQuery(Ex)
<span style="display:block;text-indent:2em;">/dynamicbase  进程共享ASLR基址重定向的页面</span></p>

<h2>第15章 在应用程序中使用虚拟内存</h2>


<p><span style="display:block;text-indent:2em;">虚拟内存：管理大型对象数组或大型数据结构数组</span>
<span style="display:block;text-indent:2em;">内存映射文件：管理大型数据流，多进程共享数据</span>
<span style="display:block;text-indent:2em;">堆：管理大量小型对象</span>
<span style="display:block;text-indent:2em;">VirtualAlloc、VirtualFree、VirtualQuery、VirtualProtect</span>
地址窗口扩展(AWE)(使用物理内存，提高性能)：AllocateUserPhysicalPages、MapUserPhysicalPages、FreeUserPhysicalPages</p>

<h2>第16章 线程栈</h2>


<p><span style="display:block;text-indent:2em;">SetThreadStackGuarante</span></p>

<!--more-->




<h2>第17章 内存映射文件</h2>


<p><span style="display:block;text-indent:2em;">映射到内存的EXE和DLL</span>
<span style="display:block;text-indent:2em;">一个应用程序的多个实例共享内存中的代码和数据，避免一个实例修改全局变量导致错误，系统通过内存管理的写时复制特性防止此发生。数据写写入时，系统会为其开辟一块新的内存。</span>
<span style="display:block;text-indent:2em;">#pragma data_seg("name") 用来创建名为"name"的段，该段内的数据必须初始化，否则数据不属于该段</span>
<span style="display:block;text-indent:2em;">allocate允许将未初始化的数据放入莫个段中</span>
<span style="display:block;text-indent:2em;">为数据创建单独的段是为了多个实例共享数据。编译选项/SECTION:name,attributes。#pragma comment(linker, "SECTION:Shared, RWS")</span>
<span style="display:block;text-indent:2em;">_tscrev颠倒文件数据(0结尾)</span>
<span style="display:block;text-indent:2em;">CreateFile(失败为NULL或INVALID_HANDLE_VALUE) --> CreateFileMapping (告诉系统映射文件需要多大的物理内存) --> MapViewOfFile --> UnmapViewOfFile --> FlushViewOfFile --> CloseHandle</span>
<span style="display:block;text-indent:2em;">MoveMemory</span>
<span style="display:block;text-indent:2em;">只读文件适合用于内存映射文件。可写文件不适合(无法保证一致性)，应独占文件(dwShareMode = 0)。</span>
<span style="display:block;text-indent:2em;">以页交换文件为后备存储器的内存映射文件：CreateFileMapping时hFile = INVALID_HANDLE_VALUE</span>
<span style="display:block;text-indent:2em;">稀疏调拨的内存映射文件：CreateMapping时传入SEC_RESERVE标志，系统不会从页交换文件中调拨物理存储器。然后使用VirtualAlloc调拨物理内存</span></p>

<h2>第18章 堆</h2>


<p><span style="display:block;text-indent:2em;">GetProcessHeap获取进程默认堆句柄。默认堆只允许一个线程访问。</span>
<span style="display:block;text-indent:2em;">HeapCreate、HeapAlloc、HeapSize、HeapFree、HeapDestroy</span>
<span style="display:block;text-indent:2em;">GetProcessHeaps、HeapValidate、HeapCompact、HeapLock、HeapUnlock、HeapWalk</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[windows via c/c++ 笔记 （六）]]></title>
    <link href="http://airpfei.github.com/blog/2011/11/24/learn-windows-progamme-6/"/>
    <updated>2011-11-24T00:00:00+08:00</updated>
    <id>http://airpfei.github.com/blog/2011/11/24/learn-windows-progamme-6</id>
    <content type="html"><![CDATA[<h2>第10章 同步设备I/O与异步设备I/O</h2>


<p><span style="display:block;text-indent:2em;">打开设备：CreateFile(文件、目录、逻辑磁盘驱动器、物理磁盘驱动器、串口、并口、邮件槽[一对多数据传输]客户端、命名管道[一对一数据传输]客户端)、CreateMailslot、CreateNamedPipe、CreatePipe、Socket、CreateConsoleScreenBuffer,GetFileType</span>
<span style="display:block;text-indent:2em;">CreateFile 的高速缓存标志：FILE_FLAG_NO_BUFFERING(GetDiskFreeSpace扇区的整数倍)，FILE_FLAG_SEQUENTIAL_SCAN，FILE_FLAG_RANDOM_ACCESS，FILE_FLAG_WRITE_THROUGH</span>
<span style="display:block;text-indent:2em;">FILE_FLAG_DELETE_ON_CLOSE、FILE_FLAG_BACKUP_SEMANTICS、FILE_FLAG_OPEN_REPARSE_POINT、FILE_FLAG_OPEN_NO_RECALL、FILE_FLAG_OVERLAPPED</span>
```
HANDLE hFile = CreateFile(...);
if (hFile == NULL) {
   // We'll never get in here
} else {
   // File might or might not be created OK
}</p>

<p>//Here's the correct way to check for an invalid file handle:
HANDLE hFile = CreateFile(...);
if (hFile == INVALID_HANDLE_VALUE) {
   // File not created
} else {
   // File created OK
}
<code>
&lt;span style="display:block;text-indent:2em;"&gt;GetFileSizeEx、GetCompressedFileSize、SetFilePointerEx、SetEndOfFile&lt;/span&gt;
&lt;span style="display:block;text-indent:2em;"&gt;执行同步设备I/O：ReadFile、WriteFile、FlushFileBuffers、CancelSynchronousIo&lt;/span&gt;
&lt;span style="display:block;text-indent:2em;"&gt;异步：OVERLAPPED结构、CancelIoEx&lt;/span&gt;
&lt;span style="display:block;text-indent:2em;"&gt;可提醒I/O：QueueUserApc(手动将一项添加到APC队列)、SleepEx、WaitForSingleObjectEx、WaitForMultipleObjectsEx、SignalObjectAndWait、GetQueuedCompletionStatusEx、MsgWaitForMultipleObjectsEx&lt;/span&gt;
&lt;span style="display:block;text-indent:2em;"&gt;I/O完成端口：CreateCompletionPort、GetQueuedCompletionStatus、PostQueuedCompletionStatus&lt;/span&gt;
</code>
//为了只创建I/O完成端口，只需要设置第四个参数。dwNumberOfConcurrentThreads (并发线程数量) = 0，系统默认为CPU的数量
HANDLE CreateNewCompletionPort(DWORD dwNumberOfConcurrentThreads) {
   return(CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, 0,</p>

<pre><code>  dwNumberOfConcurrentThreads));
</code></pre>

<p>}
```
<span style="display:block;text-indent:2em;">FILE_FLAG_NO_BUFFERING标志要求：缓存的起始位置必须是扇区大小的整数倍，VirtualAlloc函数可以确保内存块的起始位置位于分配粒度的边界</span></p>

<!--more-->


<h2>第11章 Windows线程池</h2>


<p><span style="display:block;text-indent:2em;">异步调用函数：CreateThreadpoolWork、TrySubmitThreadpoolWork、SubmitThreadpoolWork、WaitForThreadpoolWorkCallbacks、CloseThreadpoolWork</span>
<span style="display:block;text-indent:2em;">每隔一段时间调用函数：CreateThreadpoolTimer、SetThreadpoolTimer、WaitForThreadpoolTimerCallbacks、IsThreadpoolTimerSet、CloseThreadpoolTimer</span>
<span style="display:block;text-indent:2em;">内核对象出发时调用函数：CreateThreadpoolWait、SetThreadpoolWait、CloseThreadpoolWait</span>
<span style="display:block;text-indent:2em;">异步I/O请求完成时调用函数：CreateThreadpoolIo、StartThreadpoolIo、CancelThreadpoolIo、CloseThreadpoolIo</span>
<span style="display:block;text-indent:2em;">the default thread pool has the minimum number of threads set to 1 and its maximum number of threads set to 500</span></p>

<h2>第12章 纤程</h2>


<p><span style="display:block;text-indent:2em;">尽量避免使用纤程</span>
<span style="display:block;text-indent:2em;">ConvertThreadToFiber(Ex)、CreateFiber(Ex)、SwitchToFiber、DeleteFiber、GetCurrentFiber、GetFiberData</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[windows via c/c++ 笔记 （五）]]></title>
    <link href="http://airpfei.github.com/blog/2011/11/20/learn-windows-progamme-5/"/>
    <updated>2011-11-20T00:00:00+08:00</updated>
    <id>http://airpfei.github.com/blog/2011/11/20/learn-windows-progamme-5</id>
    <content type="html"><![CDATA[<h2>第8章：用户模式下的线程同步</h2>


<p><span style="display:block;text-indent:2em;">Interlocked系列函数，原子操作，使用时保证传给函数的变量是对齐的，否则可能会失效。_aligned_malloc</span>
<span style="display:block;text-indent:2em;">当一个CPU修改了Cache中一个字节时，其他收到通知，并使自己的Cache作废。应该把只读（不经常读）与可读写的数据分别存放。GetLogicalProcessorInformation,__declspec(align(#))对齐</span>
<span style="display:block;text-indent:2em;">volatile，优化器在用到这个变量时必须每次都小心地重新读取这个变量的值，而不是使用保存在寄存器里的备份。指针不受编译器的优化影响，必须从内存读取。</span>
<span style="display:block;text-indent:2em;">关键段：EnterCriticalSection、LeaveCriticalSection、InitializeCriticalSection、DeleteCriticalSection、CriticalSectionTimeout、TryEnterCriticalSection</span>
<span style="display:block;text-indent:2em;">当线程试图进入被占用的关键段，线程切换到等待状态。这意味着线程从用户模式切换到内核模式（大约 1000 个CPU；周期）。InitializeCriticalSectionAndSpinCount</span>
<span style="display:block;text-indent:2em;">条件变量：SleepConditionVariable*、WakeConditionVariable、WakeAllConditiongVariable</span>
<span style="display:block;text-indent:2em;">以原子方式操作一组对象时使用一个锁；同时访问多个逻辑资源，以相同的顺序获得锁的资源；不长时间占用锁</span></p>

<table linktabletoexcel="yes">
<caption class="table-title">
<span class="table-title">Comparison of Synchronization Mechanism Performance</span>
<br>
</caption>
<thead>
<tr valign="top">
<th class="th" scope="col" align="left">
<p class="table-para">
<b class="bold">Threads\milliseconds</b>
</p>
</th><th class="th" scope="col" align="left">
<p class="table-para">
<b class="bold">Volatile Read</b>
</p>
</th><th class="th" scope="col" align="left">
<p class="table-para">
<b class="bold">Volatile Write</b>
</p>
</th><th class="th" scope="col" align="left">
<p class="table-para">
<b class="bold">Interlocked Increment</b>
</p>
</th><th class="th" scope="col" align="left">
<p class="table-para">
<b class="bold">Critical Section</b>
</p>
</th><th class="th" scope="col" align="left">
<p class="table-para">
<b class="bold">SRWLock Shared</b>
</p>
</th><th class="th" scope="col" align="left">
<p class="table-para">
<b class="bold">SRWLock Exclusive</b>
</p>
</th><th class="th" scope="col" align="left">
<p class="table-para">
<b class="bold">Mutex</b>
</p>
</th>
</tr>
</thead>
<tbody>
<tr valign="top">
<td class="td" align="left">
<p class="table-para">1</p>
</td><td class="td" align="left">
<p class="table-para">8</p>
</td><td class="td" align="left">
<p class="table-para">8</p>
</td><td class="td" align="left">
<p class="table-para">35</p>
</td><td class="td" align="left">
<p class="table-para">66</p>
</td><td class="td" align="left">
<p class="table-para">66</p>
</td><td class="td" align="left">
<p class="table-para">67</p>
</td><td class="td" align="left">
<p class="table-para">1060</p>
</td>
</tr>
<tr valign="top">
<td class="td" align="left">
<p class="table-para">2</p>
</td><td class="td" align="left">
<p class="table-para">8</p>
</td><td class="td" align="left">
<p class="table-para">76</p>
</td><td class="td" align="left">
<p class="table-para">153</p>
</td><td class="td" align="left">
<p class="table-para">268</p>
</td><td class="td" align="left">
<p class="table-para">134</p>
</td><td class="td" align="left">
<p class="table-para">148</p>
</td><td class="td" align="left">
<p class="table-para">11082</p>
</td>
</tr>
<tr valign="top">
<td class="td" align="left">
<p class="table-para">4</p>
</td><td class="td" align="left">
<p class="table-para">9</p>
</td><td class="td" align="left">
<p class="table-para">145</p>
</td><td class="td" align="left">
<p class="table-para">361</p>
</td><td class="td" align="left">
<p class="table-para">768</p>
</td><td class="td" align="left">
<p class="table-para">244</p>
</td><td class="td" align="left">
<p class="table-para">307</p>
</td><td class="td" align="left">
<p class="table-para">23785</p>
</td>
</tr>
</tbody>
</table>




<!--more-->


<h2>第9章：用内核对象进行线程同步</h2>


<p><span style="display:block;text-indent:2em;">WaitForSingleObject、WaitForMultipleObjects，内核对象被触发返回。等待成功引起的副作用，由于事件对象触发时，在返回WAIT_OBJECT_0前会使对象变为非触发状态</span>
<code>
HANDLE h[2];
h[0] = hAutoResetEvent1;   // Initially nonsignaled
h[1] = hAutoResetEvent2;   // Initially nonsignaled
WaitForMultipleObjects(2, h, TRUE, INFINITE);
</code>
<span style="display:block;text-indent:2em;">hAutoResetEvent1先触发，hAutoResetEvent2触发，两线程的一个检测到触发，系统把两个事件对象都设为未触发</span>
<span style="display:block;text-indent:2em;">事件内核对象：CreateEvent(Ex)、SetEvent、ResetEvent、PulseEvent(不经常使用)、OpenEvent(DuplicateHandle)。使用自动重置的对象，当对象被触发，系统只会让次要线程中的一个变为可调度状态，所以要在每个次要线程调用时使用SetEvent，否则其他次要线程将等待。</span>
<span style="display:block;text-indent:2em;">可等待的计时器内核对象：CreateWaitableTimer、SetWaitableTimer、CancelWaitableTimer、OpenWaitableTimer</span>
```
void SomeFunc() {
   // Create a timer. (It doesn't matter whether it's manual-reset
   // or auto-reset.)
   HANDLE hTimer = CreateWaitableTimer(NULL, TRUE, NULL);</p>

<p>   // Set timer to go off in 5 seconds.
   LARGE_INTEGER li = { 0 };
   SetWaitableTimer(hTimer, &amp;li, 5000, TimerAPCRoutine, NULL, FALSE);</p>

<p>   //APC异步函数被插入线程，线程恢复
   // Wait in an alertable state for the timer to go off.
   SleepEx(INFINITE, TRUE);</p>

<p>   CloseHandle(hTimer);
}
```
<span style="display:block;text-indent:2em;">信号量内核对象：CreateSemaphore、OpenSemaphore、ReleaseSemaphore</span>
<span style="display:block;text-indent:2em;">互斥量内核对象：CreateMutex、OpenMutex、RleaseMutex</span>
<span style="display:block;text-indent:2em;">WaitForInputIdle、MsgWaitForMultipleObjects(Ex)(用户界面相关的线程使用)、WaitForDebugEvent、SignalObjectAndWait(通过原子操作让一个内核对象等待另一个内核对象)</span>
<span style="display:block;text-indent:2em;">等待链遍历API检测死锁：ParseThreads、OpenThreadWaitChainSession、GetThreadChain</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[windows via c/c++ 笔记 （四）]]></title>
    <link href="http://airpfei.github.com/blog/2011/11/17/learn-windows-progamme-4/"/>
    <updated>2011-11-17T00:00:00+08:00</updated>
    <id>http://airpfei.github.com/blog/2011/11/17/learn-windows-progamme-4</id>
    <content type="html"><![CDATA[<h2>第6章：线程基础</h2>


<p><span style="display:block;text-indent:2em;">线程由两部分组成：内核对象和线程栈</span>
<span style="display:block;text-indent:2em;">线程共享地址空间、共享内核对象句柄，因为句柄表是针对进程的</span>
<span style="display:block;text-indent:2em;">多线程时可以采用static变量防止对象被销毁，但这会使函数不可重入。（不能创建两个线程执行同一个函数，因为两个线程共享同一个静态变量）</span>
<span style="display:block;text-indent:2em;">ExitThread、TerminateThread、GetExitCodeThread</span>
<span style="display:block;text-indent:2em;">使用<em>beginthreadex而不要用CreateThread，CreateThread不是线程安全的，ExitThread没用释放</em>tiddata(<em>endthreadex释放了)。</em>endthread在调用ExitThread前会调用CloseHandle，而_endthreadex不会。</span>
<span style="display:block;text-indent:2em;">GetCurrentProcess、GetCurrentThread、GetCurrentProcessId、GetCurrentThreadId、DuplicateHandle用于把进程的伪句柄转换为真正的进程句柄</span></p>

<!--more-->


<h2>第7章：线程调度、优先级和关联性</h2>


<p><span style="display:block;text-indent:2em;">ResumeThread、SuspendThread，当挂起数为0时，线程可调度</span>
<span style="display:block;text-indent:2em;">WaitForDebugEvent挂起进程中所有线程，直至ContinueDebugEvent</span>
<span style="display:block;text-indent:2em;">SwitchToThread与Sleep(0)类似，SwitchToThread允许执行低优先级的线程而Sleep不可以</span>
<span style="display:block;text-indent:2em;">GetTickCount64、GetThreadTimes、GetProcessTimes、QueryThreadCycleTime、QueryProcessCycleTime、ReadTimeStampCounter、QueryPerformanceFrequency、QueryPerformanceCounter</span>
<span style="display:block;text-indent:2em;">调用GetThreadContext前应调用SuspendThread否则可能会导致Context信息不一致</span>
<span style="display:block;text-indent:2em;">SetPriorityClass、SetProcessPriorityBoost、SetThreadPriorityBoost</span>
<span style="display:block;text-indent:2em;">SetProcessAffinityMask、GetProcessAffinityMask、SetThreadIdealProcessor关联性</span></p>
]]></content>
  </entry>
  
</feed>
